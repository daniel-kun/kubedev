import unittest

import yaml
from kubedev import Kubedev
from test_utils import (EnvMock, FileMock, TemplateMock, testDeploymentConfig,
                        testMixedSubProjectsConfig)


class KubeDevGenerateDockerfiles(unittest.TestCase):

  def test_dockerfile_exists_in_deployment_dir(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    self.assertIsNotNone(fileMock.load_file('./foo-deploy/Dockerfile'))

  def test_dockerfile_exists_per_subproject(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config(
        testMixedSubProjectsConfig, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    self.assertIsNotNone(fileMock.load_file('./foo-deploy/Dockerfile'))
    self.assertIsNotNone(fileMock.load_file('./bar-deploy/Dockerfile'))

  def test_collapse_dockerfile_path(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config({
    "name": "foo-service",
    "description": "This is a sample service generated by kubedev.",
    "imagePullSecrets": "foo-creds",
    "imageRegistry": "foo-registry",
    "deployments": {
        "foo-service": {
        }
    }
}, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    self.assertIsNone(fileMock.load_file('./foo-service/Dockerfile'))
    self.assertIsNotNone(fileMock.load_file('./Dockerfile'))
