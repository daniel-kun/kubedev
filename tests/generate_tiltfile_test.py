import unittest

import yaml
from kubedev import Kubedev
from test_utils import EnvMock, FileMock, TemplateMock, testDeploymentConfig


class KubeDevGenerateTiltfile(unittest.TestCase):

  def test_tiltfile_exists(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    tiltYaml = fileMock.load_file('Tiltfile')
    self.assertIsNotNone(tiltYaml)

  def test_tiltfile_docker_builds(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    tiltfile = fileMock.load_file('Tiltfile')
    self.assertIsNotNone(tiltfile)

    self.assertIn(
        "docker_build('foo-registry/foo-service-foo-deploy', './foo-deploy/')", tiltfile)
    self.assertIn("k8s_yaml(local('kubedev template'))", tiltfile)
    self.assertIn(
        "k8s_resource('foo-service-foo-deploy', port_forwards=['8083:8082','8643:8543'])", tiltfile)

  def test_docker_build_args(self):
    self.skipTest(
        'Not yet implemented: Passing build_args to `docker build'' in Tiltfile')

  def test_tiltfile_collapses_resource_name(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config({
    "name": "foo-service",
    "description": "This is a sample service generated by kubedev.",
    "imagePullSecrets": "foo-creds",
    "imageRegistry": "foo-registry",
    "deployments": {
        "foo-service": {
        }
    }
}, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    tiltfile = fileMock.load_file('Tiltfile')
    self.assertIsNotNone(tiltfile)

    self.assertIn(
        "docker_build('foo-registry/foo-service', './')", tiltfile)
    self.assertIn("k8s_yaml(local('kubedev template'))", tiltfile)
    self.assertIn(
        "k8s_resource('foo-service',", tiltfile)
