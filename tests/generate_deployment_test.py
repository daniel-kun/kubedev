import unittest

import yaml

from kubedev import Kubedev


class FileMock:
  def __init__(self):
    self.files = dict()

  def load_file(self, filename):
    if filename in self.files:
      return self.files[filename]
    else:
      return None

  def save_file(self, filename, content, overwrite):
    if overwrite or not filename in self.files:
      self.files[filename] = content
      return True
    else:
      return False


class EnvMock:
  def __init__(self):
    self.envs = dict()

  def getenv(self, name):
    if name in self.envs:
      return self.envs[name]
    else:
      return None

  def setenv(self, name, value):
    self.envs[name] = value


testDeploymentConfig = {
    "name": "foo-service",
    "description": "This is a sample service generated by kubedev.",
    "imagePullSecrets": "foo-creds",
    "imageRegistry": "foo-registry",
    "required-envs": {
        "FOO_SERVICE_GLOBAL_ENV1": {
            "documentation": "Test env var #1 (global)"
        },
    },
    "deployments": {
        "foo-deploy": {
            "ports": {
                "http": {
                    "container": "8081",
                    "service": "8082",
                    "dev": "8083"
                },
                "https": {
                    "container": "8443",
                    "service": "8543",
                    "dev": "8643"
                },
            },
            "required-envs": {
                "FOO_SERVICE_DEPLOY_ENV1": {
                    "documentation": "Test env var #1"
                },
                "FOO_SERVICE_DEPLOY_ENV2": {
                    "documentation": "Test env var #2"
                }
            }
        }
    }
}


class KubeDevGenerateDeploymentTests(unittest.TestCase):

  def test_deployment_chartYaml(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', '_branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    chartYaml = fileMock.load_file('helm-chart/Chart.yaml')

    self.assertIsNotNone(
        chartYaml, 'helm-chart/Chart.yaml was not generated.')
    chart = yaml.safe_load(chartYaml)
    self.assertEqual(chart['name'], testDeploymentConfig['name'])
    self.assertEqual(chart['description'], testDeploymentConfig['description'])

  def test_deployment_deployyaml(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', 'branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy.yaml')

    self.assertIsNotNone(
        testDeployYaml, 'helm-chart/templates/deployments/foo-deploy.yaml was not generated.')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    self.assertEqual(testDeploy['apiVersion'], 'extensions/v1beta1')
    self.assertEqual(testDeploy['kind'], 'Deployment')
    self.assertEqual(testDeploy['metadata']['name'], "foo-service-foo-deploy")
    labels = testDeploy['metadata']['labels']
    self.assertEqual(labels['kubedev-app'], "foo-service")
    self.assertEqual(labels['kubedev-deployment'], "foo-service-foo-deploy")
    templatePart = testDeploy['spec']['template']
    templateLabels = templatePart['metadata']['labels']
    self.assertEqual(templateLabels['kubedev-app'], "foo-service")
    self.assertEqual(
        templateLabels['kubedev-deployment'], "foo-service-foo-deploy")
    containersPart = testDeploy['spec']['template']['spec']['containers']
    self.assertEqual(1, len(containersPart))
    containerPart = containersPart[0]
    self.assertEqual(
        containerPart['image'], 'foo-registry/foo-service-foo-deploy:asdf_branch')

  def test_deployment_envs(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', 'branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy.yaml')
    print(testDeployYaml)
    testDeploy = yaml.safe_load(testDeployYaml)
    container0 = testDeploy['spec']['template']['spec']['containers'][0]
    self.assertIn('env', container0)
    self.assertEqual(3, len(container0['env']))
    envs = container0['env']
    self.assertListEqual(
        [{'name': 'FOO_SERVICE_GLOBAL_ENV1',
          'value': '{{.Values.FOO_SERVICE_GLOBAL_ENV1}}'}],
        [env for env in envs if env['name'] == 'FOO_SERVICE_GLOBAL_ENV1'])
    self.assertListEqual(
        [{'name': 'FOO_SERVICE_DEPLOY_ENV1',
          'value': '{{.Values.FOO_SERVICE_DEPLOY_ENV1}}'}],
        [env for env in envs if env['name'] == 'FOO_SERVICE_DEPLOY_ENV1'])
    self.assertListEqual(
        [{'name': 'FOO_SERVICE_DEPLOY_ENV2',
          'value': '{{.Values.FOO_SERVICE_DEPLOY_ENV2}}'}],
        [env for env in envs if env['name'] == 'FOO_SERVICE_DEPLOY_ENV2'])

  def test_deployment_collapse_name(self):
    '''
    Deployments that have the same name as the project receive
    the name of the project, instead of `project-deployment`.
    '''
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', 'branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config({
        "name": "foo-service",
        "description": "This is a sample service generated by kubedev.",
        "imagePullSecrets": "foo-creds",
        "imageRegistry": "foo-registry",
        "deployments": {
            "foo-service": {
            }
        }
    }, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-service.yaml')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    self.assertEqual(testDeploy['metadata']['name'], "foo-service")
    labels = testDeploy['metadata']['labels']
    self.assertEqual(labels['kubedev-app'], "foo-service")
    self.assertEqual(labels['kubedev-deployment'], "foo-service")
    templatePart = testDeploy['spec']['template']
    templateLabels = templatePart['metadata']['labels']
    self.assertEqual(templateLabels['kubedev-app'], "foo-service")
    self.assertEqual(
        templateLabels['kubedev-deployment'], "foo-service")
    containersPart = testDeploy['spec']['template']['spec']['containers']
    self.assertEqual(1, len(containersPart))
    containerPart = containersPart[0]
    self.assertEqual(
        containerPart['image'], 'foo-registry/foo-service:asdf_branch')

  def test_deployment_ports(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', 'branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(testDeploymentConfig, False,
                             file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy.yaml')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    container0 = testDeploy['spec']['template']['spec']['containers'][0]
    self.assertIn('ports', container0)
    ports = container0['ports']
    self.assertEqual(2, len(ports))
    self.assertListEqual([{'containerPort': "8443", "name": "https"}], [
                         port for port in ports if port['name'] == 'https'])
    self.assertListEqual([{'containerPort': "8081", "name": "http"}], [
                         port for port in ports if port['name'] == 'http'])

  def test_deployment_services(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', 'branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(testDeploymentConfig, False,
                             file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testServiceYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy_service.yaml')
    self.assertIsNotNone(testServiceYaml)
    testService = yaml.safe_load(testServiceYaml)
    print(testServiceYaml)
    self.assertIn('apiVersion', testService)
    self.assertIn('kind', testService)
    self.assertEqual('Service', testService['kind'])
    self.assertIn('metadata', testService)
    self.assertEqual(2, len(testService['ports']))
    self.assertListEqual([{
        'name': 'https',
        'port': '8543',
        'targetPort': '8443'
    }], [port for port in testService['ports'] if port['name'] == 'https'])
    self.assertListEqual([{
        'name': 'http',
        'port': '8082',
        'targetPort': '8081'
    }], [port for port in testService['ports'] if port['name'] == 'http'])

  # def test_deployment_tiltfile(self):
  #   # ARRANGE
  #   fileMock = FileMock()
  #   with open('tests/test_deployment_basic.json') as f:
  #     fileMock.save_file('kubedev.json', f.read(), False)

  #   # ACT
  #   sut = Kubedev('./templates/')
  #   sut.generate(file_accessor=fileMock)

  #   # ASSERT
  #   tiltFile = fileMock.load_file('Tiltfile')

  #   self.assertIsNotNone(tiltFile, 'Tiltfile was not generated')

  # def test_deployment_gitlabci(self):
  #   # ARRANGE
  #   fileMock = FileMock()
  #   with open('tests/test_deployment_basic.json') as f:
  #     fileMock.save_file('kubedev.json', f.read(), False)

  #   # ACT
  #   sut = Kubedev('./templates/')
  #   sut.generate(file_accessor=fileMock)

  #   # ASSERT
  #   gitlabCiYaml = fileMock.load_file('.gitlab-ci.yml')

  #   self.assertIsNotNone(gitlabCiYaml, '.gitlab-ci.yml was not generated')
