import unittest

import yaml

from kubedev import Kubedev
from test_utils import EnvMock, FileMock, testDeploymentConfig


class KubeDevGenerateDeploymentTests(unittest.TestCase):

  def test_deployment_chartYaml(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    chartYaml = fileMock.load_file('helm-chart/Chart.yaml')

    self.assertIsNotNone(
        chartYaml, 'helm-chart/Chart.yaml was not generated.')
    chart = yaml.safe_load(chartYaml)
    self.assertEqual(chart['name'], testDeploymentConfig['name'])
    self.assertEqual(chart['description'], testDeploymentConfig['description'])

  def test_deployment_deployyaml(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy.yaml')

    self.assertIsNotNone(
        testDeployYaml, 'helm-chart/templates/deployments/foo-deploy.yaml was not generated.')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    self.assertEqual(testDeploy['apiVersion'], 'extensions/v1beta1')
    self.assertEqual(testDeploy['kind'], 'Deployment')
    self.assertEqual(testDeploy['metadata']['name'], "foo-service-foo-deploy")
    labels = testDeploy['metadata']['labels']
    self.assertEqual(labels['kubedev-app'], "foo-service")
    self.assertEqual(labels['kubedev-deployment'], "foo-service-foo-deploy")
    templatePart = testDeploy['spec']['template']
    templateLabels = templatePart['metadata']['labels']
    self.assertEqual(templateLabels['kubedev-app'], "foo-service")
    self.assertEqual(
        templateLabels['kubedev-deployment'], "foo-service-foo-deploy")
    containersPart = testDeploy['spec']['template']['spec']['containers']
    self.assertEqual(1, len(containersPart))
    containerPart = containersPart[0]
    self.assertEqual(
        containerPart['image'], 'foo-registry/foo-service-foo-deploy:{{.Values.KUBEDEV_TAG}}')

  def test_deployment_envs(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy.yaml')
    print(testDeployYaml)
    testDeploy = yaml.safe_load(testDeployYaml)
    container0 = testDeploy['spec']['template']['spec']['containers'][0]
    self.assertIn('env', container0)
    self.assertEqual(3, len(container0['env']))
    envs = container0['env']
    self.assertListEqual(
        [{'name': 'FOO_SERVICE_GLOBAL_ENV1',
          'value': '{{.Values.FOO_SERVICE_GLOBAL_ENV1}}'}],
        [env for env in envs if env['name'] == 'FOO_SERVICE_GLOBAL_ENV1'])
    self.assertListEqual(
        [{'name': 'FOO_SERVICE_DEPLOY_ENV1',
          'value': '{{.Values.FOO_SERVICE_DEPLOY_ENV1}}'}],
        [env for env in envs if env['name'] == 'FOO_SERVICE_DEPLOY_ENV1'])
    self.assertListEqual(
        [{'name': 'FOO_SERVICE_DEPLOY_ENV2',
          'value': '{{.Values.FOO_SERVICE_DEPLOY_ENV2}}'}],
        [env for env in envs if env['name'] == 'FOO_SERVICE_DEPLOY_ENV2'])

  def test_deployment_collapse_name(self):
    '''
    Deployments that have the same name as the project receive
    the name of the project, instead of `project-deployment`.
    '''
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config({
        "name": "foo-service",
        "description": "This is a sample service generated by kubedev.",
        "imagePullSecrets": "foo-creds",
        "imageRegistry": "foo-registry",
        "deployments": {
            "foo-service": {
            }
        }
    }, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-service.yaml')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    self.assertEqual(testDeploy['metadata']['name'], "foo-service")
    labels = testDeploy['metadata']['labels']
    self.assertEqual(labels['kubedev-app'], "foo-service")
    self.assertEqual(labels['kubedev-deployment'], "foo-service")
    templatePart = testDeploy['spec']['template']
    templateLabels = templatePart['metadata']['labels']
    self.assertEqual(templateLabels['kubedev-app'], "foo-service")
    self.assertEqual(
        templateLabels['kubedev-deployment'], "foo-service")
    containersPart = testDeploy['spec']['template']['spec']['containers']
    self.assertEqual(1, len(containersPart))
    containerPart = containersPart[0]
    self.assertEqual(
        containerPart['image'], 'foo-registry/foo-service:{{.Values.KUBEDEV_TAG}}')

  def test_deployment_ports(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(testDeploymentConfig, False,
                             file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy.yaml')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    container0 = testDeploy['spec']['template']['spec']['containers'][0]
    self.assertIn('ports', container0)
    ports = container0['ports']
    self.assertEqual(2, len(ports))
    self.assertListEqual([{'containerPort': 8443, "name": "https"}], [
                         port for port in ports if port['name'] == 'https'])
    self.assertListEqual([{'containerPort': 8081, "name": "http"}], [
                         port for port in ports if port['name'] == 'http'])

  def test_deployment_services_overwrite_and_keep(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    fileMock.save_file('helm-chart/templates/deployments/foo-service_service.yaml', '''apiVersion: v3
kind: Srv
metadata:
  name: xyz
  labels:
    kubedev-app: xyz
spec:
  type: LoadBalancer
''', True)

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config({
        "name": "foo-service",
        "description": "This is a sample service generated by kubedev.",
        "imagePullSecrets": "foo-creds",
        "imageRegistry": "foo-registry",
        "deployments": {
            "foo-service": {
                "ports": {
                    "http": {
                        "container": 8081,
                        "service": 8082
                    }
                }
            }
        }
    }, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testServiceYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-service_service.yaml')
    self.assertIsNotNone(testServiceYaml)
    print(testServiceYaml)
    self.assertEqual('''apiVersion: v3
kind: Srv
metadata:
  name: foo-service
  labels:
    kubedev-app: foo-service
    kubedev-deployment: foo-service
spec:
  type: LoadBalancer
  selector:
    kubedev-app: foo-service
    kubedev-deployment: foo-service
  ports:
  - name: http
    port: 8082
    targetPort: 8081
''', testServiceYaml)

  def test_deployment_services(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(testDeploymentConfig, False,
                             file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testServiceYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-deploy_service.yaml')
    self.assertIsNotNone(testServiceYaml)
    testService = yaml.safe_load(testServiceYaml)
    self.assertIn('apiVersion', testService)
    self.assertIn('kind', testService)
    self.assertEqual('Service', testService['kind'])
    self.assertIn('metadata', testService)
    self.assertEqual(2, len(testService['spec']['ports']))
    self.assertListEqual([{
        'name': 'https',
        'port': 8543,
        'targetPort': 8443
    }], [port for port in testService['spec']['ports'] if port['name'] == 'https'])
    self.assertListEqual([{
        'name': 'http',
        'port': 8082,
        'targetPort': 8081
    }], [port for port in testService['spec']['ports'] if port['name'] == 'http'])
