import unittest

import yaml

from kubedev import Kubedev


class FileMock:
  def __init__(self):
    self.files = dict()

  def load_file(self, filename):
    if filename in self.files:
      return self.files[filename]
    else:
      return None

  def save_file(self, filename, content, overwrite):
    if overwrite or not filename in self.files:
      self.files[filename] = content
      return True
    else:
      return False


class EnvMock:
  def __init__(self):
    self.envs = dict()

  def getenv(self, name):
    if name in self.envs:
      return self.envs[name]
    else:
      return None

  def setenv(self, name, value):
    self.envs[name] = value


testDeploymentConfig = {
    "name": "foo-service",
    "description": "This is a sample service generated by kubedev.",
    "imagePullSecrets": "foo-creds",
    "imageRegistry": "foo-registry",
    "deployments": {
        "foo-service": {
            "ports": {
                "5001": "8081",
                "5000": None
            },
            "required-envs": {
                "FOO_DEPLOY_ENV1": {
                    "documentation": "Test env var #1"
                },
                "FOO_DEPLOY_ENV2": {
                    "documentation": "Test env var #2"
                }
            }
        }
    }
}


class KubeDevGenerateBasicTests(unittest.TestCase):

  def test_deployment_chartYaml(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', '_branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    chartYaml = fileMock.load_file('helm-chart/Chart.yaml')

    self.assertIsNotNone(
        chartYaml, 'helm-chart/Chart.yaml was not generated.')
    chart = yaml.safe_load(chartYaml)
    self.assertEqual(chart['name'], testDeploymentConfig['name'])
    self.assertEqual(chart['description'], testDeploymentConfig['description'])

  def test_deployment_deployyaml(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()
    envMock.setenv('CI_COMMIT_SHORT_SHA', 'asdf')
    envMock.setenv('CI_COMMIT_REF_NAME', 'branch')

    # ACT
    sut = Kubedev('./templates/')
    sut.generate_from_config(
        testDeploymentConfig, False, file_accessor=fileMock, env_accessor=envMock)

    # ASSERT
    testDeployYaml = fileMock.load_file(
        'helm-chart/templates/deployments/foo-service.yaml')

    self.assertIsNotNone(
        testDeployYaml, 'helm-chart/templates/deployments/foo-service.yaml was not generated.')
    testDeploy = yaml.safe_load(testDeployYaml)
    print(testDeployYaml)
    self.assertEqual(testDeploy['apiVersion'], 'extensions/v1beta1')
    self.assertEqual(testDeploy['kind'], 'Deployment')
    self.assertEqual(testDeploy['metadata']['name'], "foo-service")
    self.assertEqual(testDeploy['metadata']['labels']
                     ['k8s-app'], "foo-service")
    templatePart = testDeploy['spec']['template']
    self.assertEqual(templatePart['metadata']
                     ['labels']['k8s-app'], "foo-service")
    containersPart = testDeploy['spec']['template']['spec']['containers']
    self.assertEqual(1, len(containersPart))
    containerPart = containersPart[0]
    self.assertEqual(
        containerPart['image'], 'foo-registry/foo-service:asdf_branch')

  def test_deployment_tiltfile(self):
    # ARRANGE
    fileMock = FileMock()
    with open('tests/test_deployment_basic.json') as f:
      fileMock.save_file('kubedev.json', f.read(), False)

    # ACT
    sut = Kubedev('./templates/')
    sut.generate(file_accessor=fileMock)

    # ASSERT
    tiltFile = fileMock.load_file('Tiltfile')

    self.assertIsNotNone(tiltFile, 'Tiltfile was not generated')

  def test_deployment_gitlabci(self):
    # ARRANGE
    fileMock = FileMock()
    with open('tests/test_deployment_basic.json') as f:
      fileMock.save_file('kubedev.json', f.read(), False)

    # ACT
    sut = Kubedev('./templates/')
    sut.generate(file_accessor=fileMock)

    # ASSERT
    gitlabCiYaml = fileMock.load_file('.gitlab-ci.yml')

    self.assertIsNotNone(gitlabCiYaml, '.gitlab-ci.yml was not generated')
