import unittest

import yaml
from kubedev import Kubedev
from test_utils import (EnvMock, FileMock, TemplateMock, testDeploymentConfig,
                        testMixedSubProjectsConfig)


class KubeDevGenerateUsedFrameworks(unittest.TestCase):

  def test_usedframework_pipenv_local(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config({
    "name": "foo-service",
    "description": "This is a sample service generated by kubedev.",
    "imagePullSecrets": "foo-creds",
    "imageRegistry": "foo-registry",
    "deployments": {
        "foo-deploy": {
          "usedFrameworks": ["some-other", "pipenv", "and-another"]
        }
    }
}, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    self.assertIsNotNone(fileMock.load_file('./foo-deploy/app.py'))
    self.assertIsNotNone(fileMock.load_file('./foo-deploy/Pipfile'))
    self.assertIsNotNone(fileMock.load_file('./foo-deploy/Pipfile.lock'))
    dockerfile = fileMock.load_file('./foo-deploy/Dockerfile')
    self.assertIn("pip install pipenv", dockerfile)
    self.assertIn("pipenv install", dockerfile)
    self.assertIn("Pipfile", dockerfile)

  def test_usedframework_pipenv_global_collapsed(self):
    # ARRANGE
    fileMock = FileMock()
    envMock = EnvMock()

    # ACT
    sut = Kubedev()
    sut.generate_from_config({
    "name": "foo-service",
    "description": "This is a sample service generated by kubedev.",
    "imagePullSecrets": "foo-creds",
    "imageRegistry": "foo-registry",
    "usedFrameworks": ["some-other", "pipenv", "and-another"],
    "deployments": {
        "foo-service": {
        }
    }
}, False, file_accessor=fileMock, env_accessor=envMock, template_accessor=TemplateMock())

    # ASSERT
    self.assertIsNotNone(fileMock.load_file('./app.py'))
    self.assertIsNotNone(fileMock.load_file('./Pipfile'))
    self.assertIsNotNone(fileMock.load_file('./Pipfile.lock'))
    dockerfile = fileMock.load_file('./Dockerfile')
    self.assertIn("pip install pipenv", dockerfile)
    self.assertIn("pipenv install", dockerfile)
    self.assertIn("Pipfile", dockerfile)
